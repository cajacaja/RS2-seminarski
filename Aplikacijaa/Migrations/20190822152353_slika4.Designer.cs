// <auto-generated />
using System;
using Aplikacijaa.ContextFolder;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aplikacijaa.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190822152353_slika4")]
    partial class slika4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aplikacijaa.Models.AdministrastorRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AdministrastorRole");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministrastorRoleId");

                    b.Property<int>("CityId");

                    b.Property<int>("ContactInfoId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("FName");

                    b.Property<string>("LName");

                    b.Property<int>("ProfileInfoId");

                    b.HasKey("Id");

                    b.HasIndex("AdministrastorRoleId");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("ProfileInfoId");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("Aplikacijaa.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ClassRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateOfRequest");

                    b.Property<DateTime>("DateTo");

                    b.Property<TimeSpan>("HourFrom");

                    b.Property<TimeSpan>("HourTo");

                    b.Property<bool>("IsAceppted");

                    b.Property<bool>("IsRead");

                    b.Property<int>("StudentId");

                    b.Property<int>("TeacherId");

                    b.Property<int?>("TypeOfClassId1");

                    b.Property<int?>("TypeOfClassIdId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TypeOfClassId1");

                    b.HasIndex("TypeOfClassIdId");

                    b.ToTable("ClassRequest");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserGender");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Aplikacijaa.Models.LandLord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("ContactInfoId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Fname");

                    b.Property<int>("GenderId");

                    b.Property<string>("LName");

                    b.Property<int>("ProfileInfoId");

                    b.Property<byte[]>("ProfilePicture");

                    b.Property<int>("StatusId");

                    b.Property<int?>("UserStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProfileInfoId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("LandLord");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ListOfStudents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentTypeId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("StudentTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ListOfStudents");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ProfileInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("ProfileInfo");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Proof", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PictureName");

                    b.Property<int>("TutorRegistrationFormId");

                    b.HasKey("Id");

                    b.HasIndex("TutorRegistrationFormId");

                    b.ToTable("Proof");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ReportedStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfReporting");

                    b.Property<bool>("IsRead");

                    b.Property<string>("ResaonForReport");

                    b.Property<int>("StudentId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ReportedStudent");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ReportedTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfReporting");

                    b.Property<bool>("IsRead");

                    b.Property<int>("StudentId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ReportedTeacher");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("ContactId");

                    b.Property<int?>("ContactInfoId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FName");

                    b.Property<int>("GenderId");

                    b.Property<string>("LName");

                    b.Property<int>("ProfileInfoId");

                    b.Property<byte[]>("ProfilePicture");

                    b.Property<int>("StatusId");

                    b.Property<int>("StudentTypeId");

                    b.Property<int?>("UserStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProfileInfoId");

                    b.HasIndex("StudentTypeId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Aplikacijaa.Models.StudentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("StudentType");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("CollageName");

                    b.Property<int>("ContactInfoId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FName");

                    b.Property<int>("GenderId");

                    b.Property<string>("LName");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProfileInfoId");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TitleId");

                    b.Property<int>("UserStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProfileInfoId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleName");

                    b.HasKey("Id");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Aplikacijaa.Models.TutorRegistrationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("CollageName");

                    b.Property<int>("ContactInfoId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FName");

                    b.Property<int>("GenderId");

                    b.Property<string>("LName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TitleId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TitleId");

                    b.ToTable("TutorRegistrationForm");
                });

            modelBuilder.Entity("Aplikacijaa.Models.TypeOfClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeOfClass");
                });

            modelBuilder.Entity("Aplikacijaa.Models.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Administrator", b =>
                {
                    b.HasOne("Aplikacijaa.Models.AdministrastorRole", "AdministrastorRole")
                        .WithMany()
                        .HasForeignKey("AdministrastorRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ProfileInfo", "ProfileInfo")
                        .WithMany()
                        .HasForeignKey("ProfileInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aplikacijaa.Models.ClassRequest", b =>
                {
                    b.HasOne("Aplikacijaa.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Aplikacijaa.Models.TypeOfClass", "TypeOfClass")
                        .WithMany()
                        .HasForeignKey("TypeOfClassId1");

                    b.HasOne("Aplikacijaa.Models.TypeOfClass", "TypeOfClassId")
                        .WithMany()
                        .HasForeignKey("TypeOfClassIdId");
                });

            modelBuilder.Entity("Aplikacijaa.Models.LandLord", b =>
                {
                    b.HasOne("Aplikacijaa.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ProfileInfo", "ProfileInfo")
                        .WithMany()
                        .HasForeignKey("ProfileInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId");
                });

            modelBuilder.Entity("Aplikacijaa.Models.ListOfStudents", b =>
                {
                    b.HasOne("Aplikacijaa.Models.StudentType", "StudentType")
                        .WithMany()
                        .HasForeignKey("StudentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aplikacijaa.Models.Proof", b =>
                {
                    b.HasOne("Aplikacijaa.Models.TutorRegistrationForm", "TutorRegistrationForm")
                        .WithMany()
                        .HasForeignKey("TutorRegistrationFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aplikacijaa.Models.ReportedStudent", b =>
                {
                    b.HasOne("Aplikacijaa.Models.Student", "RepStudent")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Aplikacijaa.Models.ReportedTeacher", b =>
                {
                    b.HasOne("Aplikacijaa.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Teacher", "RepTeacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Aplikacijaa.Models.Student", b =>
                {
                    b.HasOne("Aplikacijaa.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId");

                    b.HasOne("Aplikacijaa.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ProfileInfo", "ProfileInfo")
                        .WithMany()
                        .HasForeignKey("ProfileInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.StudentType", "StudentType")
                        .WithMany()
                        .HasForeignKey("StudentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId");
                });

            modelBuilder.Entity("Aplikacijaa.Models.Subject", b =>
                {
                    b.HasOne("Aplikacijaa.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aplikacijaa.Models.Teacher", b =>
                {
                    b.HasOne("Aplikacijaa.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ProfileInfo", "ProfileInfo")
                        .WithMany()
                        .HasForeignKey("ProfileInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aplikacijaa.Models.TutorRegistrationForm", b =>
                {
                    b.HasOne("Aplikacijaa.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aplikacijaa.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
